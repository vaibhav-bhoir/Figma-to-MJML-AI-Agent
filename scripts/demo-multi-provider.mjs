#!/usr/bin/env node

/**
 * Demo script to test multi-provider AI system
 */

import { generateMJMLWithFallback, getAvailableProviders } from '../lib/multi-ai.js';

console.log('üöÄ Multi-Provider AI Demo');
console.log('==========================\n');

// Test data
const testLayoutData = {
  fileName: 'demo-design.fig',
  layouts: [{
    name: 'Email Template Demo',
    width: 600,
    height: 400,
    elements: [
      {
        type: 'TEXT',
        name: 'Header Text',
        text: 'Welcome to Our Newsletter',
        fontSize: 28,
        fontWeight: 600,
        textColor: '#333333'
      },
      {
        type: 'TEXT',
        name: 'Body Text',
        text: 'This is a demo email template generated by our multi-provider AI system.',
        fontSize: 16,
        textColor: '#666666'
      },
      {
        type: 'RECTANGLE',
        name: 'CTA Button',
        backgroundColor: '#007bff',
        hasButton: true
      }
    ]
  }]
};

async function runDemo() {
  try {
    // Show available providers
    console.log('üìã Available Providers:');
    const providers = getAvailableProviders();
    providers.forEach(provider => {
      const status = provider.available ? '‚úÖ' : '‚ùå';
      const cost = provider.free ? 'üÜì FREE' : 'üí∞ Paid';
      console.log(`   ${status} ${provider.name} - ${cost} (${provider.setup})`);
    });
    
    console.log('\nüéØ Testing Multi-Provider Generation...\n');
    
    // Test the multi-provider system
    const result = await generateMJMLWithFallback(testLayoutData, ['openai', 'cohere', 'enhanced-fallback']);
    
    console.log('üìä Generation Results:');
    console.log(`   ü§ñ Provider Used: ${result.provider}`);
    console.log(`   üìß MJML Length: ${result.mjml.length} characters`);
    console.log(`   üîÑ Used Fallback: ${result.usedFallback ? 'Yes' : 'No'}`);
    console.log(`   ‚ö° Success: ${result.success ? 'Yes' : 'No'}`);
    
    if (result.aiErrors && result.aiErrors.length > 0) {
      console.log('\n‚ö†Ô∏è  AI Provider Errors:');
      result.aiErrors.forEach(error => {
        console.log(`   ‚ùå ${error.provider}: ${error.error}`);
      });
    }
    
    console.log('\nüìù Generated MJML Preview:');
    console.log('----------------------------------------');
    console.log(result.mjml.substring(0, 500) + '...');
    console.log('----------------------------------------');
    
    console.log('\n‚úÖ Demo completed successfully!');
    console.log('\nüí° Tips:');
    console.log('   ‚Ä¢ Add COHERE_API_KEY to .env.local for free AI enhancement');
    console.log('   ‚Ä¢ The system always works with intelligent fallback');
    console.log('   ‚Ä¢ Visit cohere.ai to get 5M free tokens/month');
    
  } catch (error) {
    console.error('‚ùå Demo failed:', error.message);
    console.error(error.stack);
  }
}

// Handle ES modules
if (import.meta.url === `file://${process.argv[1]}`) {
  runDemo();
}

export { runDemo };
